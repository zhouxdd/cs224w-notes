I"O&<p>We begin by motivating the study of graph representations of data, or networks. Networks form a general language for desribing complex systems of interacting entities. Pictorially, rather than thinking that our dataset consists of a set of isolated data points, we consider interactions and relationships between these points.</p>

<p>It’s instructive to make a philosophical distinction between different kinds of networks. One interpretation of networks is as examples of phenomena that appear in real life; we call these networks <em>natural graphs</em>. A couple examples include</p>
<ul>
  <li>The human social network (a collection of 7+ billion individuals)</li>
  <li>Internet communication systems (a collection of electronic devices)</li>
</ul>

<p>An alternative interpretation of networks is as a data structure useful for solving a specific prediction problem. In this case, we’re more interested in relationships between entities so we can efficiently perform learning tasks. We call these networks <em>information graphs</em>, and some examples include</p>
<ul>
  <li>Scene graphs (how objects in a scene relate to one another)</li>
  <li>Similarity networks (in which similar points in a dataset are connected).</li>
</ul>

<p>Some of the main questions we’ll be considering in this course involve how such systems are organized and what their design properties are. It’s also possible to represent datasets with rich relational structure as graphs for numerous prediction tasks: in this case, we hope to explicitly model relationships for better predictive performance. Some examples of such predictive tasks include</p>

<ol>
  <li><em>Node classification</em>, where we predict the type/color of a given node</li>
  <li><em>Link prediction</em>, where we predict whether two nodes are linked</li>
  <li><em>Community detection</em>, where we identify densely linked clusters of nodes</li>
  <li><em>Similarity computation</em>, where we measure the similarity of two nodes or networks</li>
</ol>

<p>Altogether, networks are a universal language for describing complex data, and generalize across a variety of different fields. With increased data availability and a variety of computational challenges, learning about networks leaves one poised to make a wide variety of contributions.</p>

<h1 id="a-review-of-graphs">A Review of Graphs</h1>

<h2 id="basic-concepts">Basic Concepts</h2>

<p>A network/graph<label for="note-graphnetwork" class="margin-toggle sidenote-number"></label><input type="checkbox" id="note-graphnetwork" class="margin-toggle" /><span class="sidenote">Technically, a network often refers to real systems (the web, a social network, etc.) while a <em>graph</em> often refers to the mathematical representation of a network (a web graph, social graph, etc.). In these notes, we will use the terms interchangeably.</span> is defined as a collection of objects where some pairs of objects are connected by links. We define the set of objects (nodes) as <script type="math/tex">N</script>, the set of interactions (edges/links) as <script type="math/tex">E</script>, and the graph over <script type="math/tex">N</script> and <script type="math/tex">E</script> as <script type="math/tex">G(N, E)</script>.</p>

<p><em>Undirected</em> graphs have symmetrical/reciprocal links (e.g. friendship on Facebook). We define the node degree <script type="math/tex">k_i</script> of node <script type="math/tex">i</script> in an undirected graph as the number of edges adjacent to node <script type="math/tex">i</script>. The average degree is then</p>

<script type="math/tex; mode=display">\bar{k} = \langle k \rangle = \frac{1}{\vert N \vert} \sum_{i=1}^{\vert N \vert} k_i = \frac{2 \vert E \vert}{N}</script>

<p><em>Directed</em> graphs have directed links (e.g. following on Twitter). We define the in-degree <script type="math/tex">k^{in}_i</script> as the number of edges entering node <script type="math/tex">i</script>. Similarly, we define the out-degree <script type="math/tex">k^{out}_i</script> as the number of edges leaving node <script type="math/tex">i</script>. The average degree is then</p>

<script type="math/tex; mode=display">\bar{k} = \langle k \rangle = \frac{\vert E \vert}{N}</script>

<p><strong>Complete Graphs.</strong> An undirected graph with the maximum number of edges (such that all pairs of nodes are connected) is called the complete graph. The complete graph has <script type="math/tex">\vert E\vert = \binom{N}{2} = \frac{N(N-1)}{2}</script> and average degree <script type="math/tex">\vert N\vert-1</script>.</p>

<p><strong>Bipartite Graphs.</strong> A bipartite graph is a graph whose nodes can be divided into two disjoint sets <script type="math/tex">U</script> and <script type="math/tex">V</script> such that every edge connects a node in <script type="math/tex">U</script> to a node in <script type="math/tex">V</script><label for="note-graphnetwork" class="margin-toggle sidenote-number"></label><input type="checkbox" id="note-graphnetwork" class="margin-toggle" /><span class="sidenote">That is, there are no edges between nodes in <script type="math/tex">U</script> and between nodes in <script type="math/tex">V</script>. We call <script type="math/tex">U</script> and <script type="math/tex">V</script> independent sets.</span>. We can ‘‘fold’’ bipartite graphs by creating edges within independent sets <script type="math/tex">U</script> or <script type="math/tex">V</script> if they share at least one common neighbor.</p>

<p><label for="note-bipartite-folded" class="margin-toggle">⊕</label><input type="checkbox" id="note-bipartite-folded" class="margin-toggle" /><span class="marginnote">Here, projection <script type="math/tex">U</script> connects nodes in <script type="math/tex">U</script> if they share at least one neighbor in <script type="math/tex">V</script>. The same process is applied to obtain projection <script type="math/tex">V</script>.</span></p>

<p><img src="../assets/img/introduction_bipartite_folded.png?style=centerme" alt="bipartite-folded" /></p>

<p><strong>Other Graph Types</strong>. We briefly note that graphs can also include self-edges (self-loops), weights associated with edges, and multiple edges connecting nodes. These attributes can be encoded in graph representations with ease.</p>

<h2 id="representing-graphs">Representing Graphs</h2>

<p>We can represent graph <script type="math/tex">G</script> as <strong>adjacency matrix</strong> <script type="math/tex">A</script> such that <script type="math/tex">A_{ij} = 1</script> if <script type="math/tex">i</script> and <script type="math/tex">j</script> are linked (and <script type="math/tex">A_{ij} = 0</script> otherwise). Note that <script type="math/tex">A</script> is asymmetric for directed graphs. For example, a graph with a 3-clique on nodes 1, 2, and 3 and an additional edge from node 3 to 4 can be represented as</p>

<script type="math/tex; mode=display">% <![CDATA[
A = \begin{bmatrix} 0 & 1 & 0 & 1 \\ 1 & 0 & 0 & 1 \\ 0 & 0 & 0 & 1 \\ 1 & 1 & 1 & 0 \end{bmatrix} %]]></script>

<p>For an undirected graph,</p>

<script type="math/tex; mode=display">k_i = \sum_{j=1}^{\vert N \vert} A_{ij} \qquad \text{and} \qquad k_j = \sum_{i=1}^{\vert N \vert} A_{ij}</script>

<p>And likewise, for a directed graph,</p>

<script type="math/tex; mode=display">k_i^{out} = \sum_{j=1}^{\vert N \vert} A_{ij} \qquad \text{and} \qquad k_j^{in} = \sum_{i=1}^{\vert N \vert} A_{ij}</script>

<p>However, most real-world networks are sparse (<script type="math/tex">\vert E \vert \ll E_{max}</script>, or <script type="math/tex">\bar{k} \ll \vert N \vert -1</script>). As a consequence, the adjacency matrix is filled with zeros (an undesirable property).</p>

<p>In order to alleviate this issue, we can represent graphs as a set of edges (an <strong>edge list</strong>). This makes edge lookups harder, but preserves memory.</p>

<h2 id="graph-connectivity">Graph Connectivity</h2>

<p>We call an undirected graph <script type="math/tex">G</script> <strong>connected</strong> if there is a path between any pair of nodes in the graph. A <strong>disconnected</strong> graph is made up by two or more connected components. A <strong>bridge edge</strong> is an edge such that its removal disconnects <script type="math/tex">G</script>; an <strong>articulation node</strong> is a node such that its removal disconnects <script type="math/tex">G</script>. The adjacency matrix of networks with several components can be written in block-diagonal form (so that nonzero elements are confined to squares, and all other elements are 0).</p>

<p>We can further extend these concepts to directed graphs by definining a <strong>strongly connected</strong> directed graph as one which has a path from each node to every other node and vice versa (e.g. a path <script type="math/tex">A \to B</script> and <script type="math/tex">B \to A</script>). A <strong>weakly connected</strong> directed graph is connected if we disregard the edge directions. We further define <strong>strongly connected components</strong> (SCCs) as strongly connected subgraphs of <script type="math/tex">G</script>. Nodes that can reach the SCC are part of its in-component, and nodes that can be reached from the SCC are part of its out-component.</p>

<p>The graph below is connected but not strongly connected. It contains one SCC (the graph <script type="math/tex">G' = G[A, B, C]</script> induced on nodes A, B, and C).
<img src="../assets/img/introduction_directed_graph.png?style=centerme" alt="directed-graph" /></p>

<p><br /></p>

<table>
  <tbody>
    <tr>
      <td><a href="../">Index</a></td>
      <td><a href="../">Previous</a></td>
      <td><a href="./measuring-networks-random-graphs">Next</a></td>
    </tr>
  </tbody>
</table>
:ET